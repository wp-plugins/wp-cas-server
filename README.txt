=== Cassava CAS Server ===
Contributors: goblindegook
Tags: authentication, cas, central authentication service, single sign-on, jasig cas, sso
Requires at least: 3.9
Tested up to: 3.9
Stable tag: 1.0.1
License: GPLv2
License URI: http://www.gnu.org/licenses/gpl-2.0.html

Cassava provides authentication services based on the Jasig CAS protocol.

== Description ==

Cassava allows WordPress to act as a single sign-on authenticator using versions 1.0 and 2.0 of the Central Authentication Service (CAS) protocol.

That way, users on your WordPress install may be able to access different applications that support the CAS protocol by providing a single set of credentials and without exposing the user's password.

By default, CAS method URIs are provided under the `wp-cas` endpoint:

* `/wp-cas/login`: Allows a remote service to request that a user authenticate on the CAS server. Will redirect back to the remote service along with a service ticket.
* `/wp-cas/logout`: Terminates the single sign-on session. May optionally back to the remote service.
* `/wp-cas/proxy` [CAS 2.0]: Provides remote services with proxy tickets in exchange for proxy-granting tickets. Returns an XML response.
* `/wp-cas/proxyValidate` [CAS 2.0]: Allows a remote service to validate a service or proxy ticket forwarded by the user on redirect. Returns an XML response.
* `/wp-cas/serviceValidate` [CAS 2.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns an XML response.
* `/wp-cas/validate` [CAS 1.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns a plaintext response.

There are a few [client integration](http://www.jasig.org/cas/client-integration) libraries available for CAS, as well as a handy guide for [CASifying several existing applications](https://wiki.jasig.org/display/CASC/CASifying+Applications). Independent WordPress installations may integrate Cassava using a client plugin such as [CAS Maestro](http://wordpress.org/plugins/cas-maestro/).

Please follow and contribute to Cassava's development on [Github](https://github.com/goblindegook/wp-cas-server).

== Installation ==

= Using The WordPress Dashboard =

1. Navigate to the 'Add New' in the plugins dashboard
2. Search for 'wp cas server'
3. Click 'Install Now'
4. Activate the plugin on the Plugin dashboard

= Uploading in WordPress Dashboard =

1. Navigate to the 'Add New' in the plugins dashboard
2. Navigate to the 'Upload' area
3. Select `wp-cas-server.zip` from your computer
4. Click 'Install Now'
5. Activate the plugin in the Plugin dashboard

= Using FTP =

1. Download `wp-cas-server.zip`
2. Extract the `wp-cas-server` directory to your computer
3. Upload the `wp-cas-server` directory to the `/wp-content/plugins/` directory
4. Activate the plugin in the Plugin dashboard

== Frequently Asked Questions ==

= How does CAS work? =

The CAS protocol requires three entities to function: the user's web _browser_, a web _application_ requesting authentication, and a _CAS server_ as implemented by this plugin.

When a user accesses an application and attempts to authenticate to it, the application sends the user to the CAS server for validation. The CAS server will look for an active session or else explicitly request the user to insert their credentials.

Upon authenticating the user, the CAS server returns the user to the application they came from along with a security ticket.

Behind the scenes, the application then contacts the CAS server over a secure connection to independently verify that the security ticket is valid.  The CAS server responds with information about the user's status, confirming they are who they claim to be.

= Does the plugin require HTTPS to function? =

Yes.  Because applications trade security tickets via HTTP requests, it is very important that this information be encrypted so as not to be easily intercepted.  By running a single sign-on service over an unencrypted channel such as plain HTTP, you would run a considerable risk of allowing unauthorized persons into your network.

= What do I do if a malicious agent forges or alters my security tickets? =

If you suspect anyone may have compromised the integrity of the security tickets generated by the CAS server, you should immediately [generate a new set of secret keys](https://api.wordpress.org/secret-key/1.1/salt/) and swap them out in WordPress's `wp-config.php` file.

= What is the default endpoint for the CAS server? =

By default, the plugin provides methods under the `wp-cas` endpoint.  So, if you're configuring a CAS client to use your site at `https://www.my-site.com/`, then the full URI should be something like `https://www.my-site.com/wp-cas/`.

The endpoint may be changed at any time by navigating to **Settings > Permalinks** in the Admin Dashboard.  Bear in mind that if you change the endpoint you will also need to reconfigure all CAS clients that use the service.

= How can I change other settings? =

At the moment, the only way to change the plugin's behaviour is through the Hooks API.

= Where can I read about the CAS protocol specification? =

You may peruse the CAS 1.0 and 2.0 protocol specifications in complete detail at the [official project site](http://www.jasig.org/cas/protocol).

= What types of tickets does this plugin support? =

Cassava sets and receives Service Tickets (ST), Proxy-Granting Tickets (PGT), Proxy-Granting Ticket IOUs (PGTIOU) and Proxy Tickets (PT).

== Hooks ==

= Action: `cas_server_before_request` =

Fires before a CAS request is processed.

Parameters:

* _string_ `$path`: Requested URI path.

= Action: `cas_server_after_request` =

Fires after a CAS request is processed.

Parameters:

* _string_ `$path`: Requested URI path.

= Action: `cas_server_error` =

Fires if the CAS server has to return an XML error.

Parameters:

* _WP\_Error_ `$errpr`: WordPress error to return as XML.

= Action: `cas_server_validation_success` =

Fires on successful ticket validation.

Parameters:

* _WP\_User_ `$user`: WordPress user validated by ticket.
* _string_ `$ticket`: Valid ticket string.

= Action: `cas_server_validation_error` =

Fires on an invalid ticket.

Parameters:

* _WP\_Error_ `$error`: Validation error for the ticket provided.

= Filter: `cas_enabled` =

Allows developers to disable CAS.

Parameters:

* _boolean_ `$cas_enabled`: Whether the server should respond to single sign-on requests.

= Filter: `cas_server_routes` =

Allows developers to override the default callback mapping, define additional endpoints and provide alternative implementations to the provided methods.

Parameters:

* _array_ `$cas_routes`: CAS endpoint to callback mapping.

= Filter: `cas_server_response` =

Lets developers change the CAS server response string.

Parameters:

* _string_ `$output`: Response output string.
* _string_ `$path`: Requested URI path.

= Filter: `cas_server_dispatch_args` =

Filters the callback arguments to be dispatched for the request. Plugin developers may return a `WP_Error` object here to abort the request.

Parameters:

* _array_ `$args`: Arguments to pass the callback.
* _(string|array)_ `$callback`: Callback function or method.
* _string_ `$path`: Requested URI path.

= Filter: `cas_server_login_args` =

Allows developers to change the request parameters passed to a `/login` request.

Parameters:

* _array_ `$args`: HTTP request (GET, POST) parameters.

= Filter: `cas_server_redirect_service` =

Filters the redirect URI for the service requesting user authentication.

Parameters:

* _string_ `$service`: Service URI requesting user authentication.
* _WP\_User_ `$user`: Logged in WordPress user.

= Filter: `cas_server_custom_auth_uri` =

Allows developers to redirect the user to a custom login form.

Parameters:

* _string_ `$custom_login_url`: URI for the custom login page.
* _array_ `$args`: Login request parameters.

= Filter: `cas_server_ticket_expiration` =

This filter allows developers to override the default ticket expiration period.

Parameters:

* _int_ `$expiration`: Ticket expiration period (in seconds).
* _string_ `$type`: Type of ticket to set.
* _WP\_User_ `$user`: Authenticated user associated with the ticket.

= Filter: `cas_server_validation_extra_attributes` =

Allows developers to change the list of (key, value) pairs before they're included in a `/serviceValidate` response.

Parameters:

* _array_ `$attributes`: List of attributes to output.
* _WP\_User_ `$user`: Authenticated user.

== Upgrade Notice ==

== Changelog ==

= 1.0.1 =

* SSL is a requirement. No endpoints are exposed over unencrypted HTTP.

= 1.0.0 =

* Initial release.